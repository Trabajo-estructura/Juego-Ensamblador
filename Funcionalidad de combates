Hola a todos. He estado pensado un poco y en vista de la dificultad que representa el hecho de ir cambiando de buffer e ir
repintando las imágenes (que intuyo que requiere bastante tiempo) y además, no veo con buenos ojos el descenso de la barra
de vida de los pokémon. Por lo tanto, postulo esta nueva idea. Vamos a diseñar el juego "principalmente" sobre el buffer
principal. De este modo podemos trabajar directamente sobre el modelado de las imágenes y sus actualizaciones.
(Por ejemplo en la derrota de uno, por el momento basta en mostrar un recuadro en blanco en la posición que ocupaba).
Con respecto a la barra de vida he pensado lo siguiente. Ni mucho menos vamos a utilizar fórmulas de cálculo de daño y 
lo tipos efectivos son reduntantes. Vamos ha tener definido una barra de vida de un tamaño inicial en píxeles (por ejemplo  50).
Tendremos además unos punteros a distintos niveles de daño (para que se vea que no siempre se hace el mismo daño), que son
de 10 píxeles, 30 y 40 por ejemplo. La idea es que usando el RANDOM, generémos un número, y en función de dicho número
hacemos uno de los 3 daños y actualizamos la barra de vida (verde) sobreponiendo una parra del tamaño de daño obtenido
de color blanco. Si por ejemplo se obteiene 10px, entonces ponemos una barra de 10px blanco sobre la barra verde de 50px.
Ahora tenemos 40px. Si luego se selecciona 40px, podemos decir que el golpe es crítico y se termina el combate. Si no lo es, 
tenemos que evitar que se seleccione nuevamente 10px pues no se vería nada, por lo tanto buscamos el inmediatamente superior
para que haga daño. (SI NOS DA TIEMPO podemos hacer que si se selecciona el mismo, aunque este no haga nada, podemos decir
que el ataque ha fallado). Por último, si estamos a 10px de vida (el final), ya no podemos hacer daño con los anteriores, por lo tanto,
la idea es tener un daño igual a la barra de la vida y, cuando se dé la condición (de no poder hacer daño), simplemente 
buscamos y dibujamos la barra máxima sobre la barra de vida y el combate termina. 

Aquí tenéis un ejemplo de las barras.

Barra de vida: -------------------------------------------------- 50px

Barras de daño: ---------- 10px, --------------------20px, ----------------------------- 30px, -------------------------------------------------- 50px (necesária)
(PODEMOS TENER MÁS BARRAS DE DAÑO, PERO MÁS TIEMPO EN CALCULAR)

1. Se hace daño 10px
Barra de vida: ---------------------------------------- 40px
2. Se hace daño 20px o 50px
Barra de vida: ----------------------------- 30px (para 20px, 0px para 50px (CRÍTICO))
3. Se hace daño 10px
Barra de vida: ----------------------------- 30px (no se vé nada, HA FALLADO)
4. Se hace daño 30px
Barra de vida: -------------------- 20px       
5. Se hace daño 50px
Barra de vida: 0px

Esta no es la única opción de daño, pero es la primera que se me ha ocurrido. OTRA POSIBLE OPCIÓN sería precísamente
Tener las mismas barras de daño hechas, pero en función de un valor, no ir redibujando sobre la misma barra como en el caso
anterior sino calcular la diferencia restante entre la barra de vida quitada y la disponible. Como sabemos cuantos 
píxeles de vida nos quedan, podemos situar las coordenadas de dibujado del rectángulo blanco de daño justo al principio
de la barra blanca de daño anterior. El límite entre la barra verde y blanca. A partir de aquí, ir avanzando (en coordenadas)
e ir consumiendo la barra verde desde las coordenadas anteriores. 

Ejemplo:
Barra de vida: 

Barra de vida: -------------------------------------------------- 50px

Barras de daño: ---------- 10px, --------------------20px, ----------------------------- 30px, -------------------------------------------------- 50px (NO necesária)

1. Daño de 10px                                       (x)
Barra de vida: -------------------------------------------------- 50px
Barra de vida: ---------------------------------------- 40px
2. Daño de 20px                   (x) nueva
Barra de vida: ---------------------------------------- 40px
Barra de vida: -------------------- 20px
3. Daño de 10px         (x) nueva           
Barra de vida: -------------------- 20px
Barra de vida: ---------- 10px
4. Daño de 10px
Barra de vida: ---------- 10px
Barra de vida: 0px

Es importante ver que en este caso, no hay que controlar el daño que hacemos. Ya que si por ejemplo tenenos 10 px de vida y hacemos 
50px de daño, podemos dibujar la barra entera sobre la verde, (aunque técnicamente nos salimos de la pantalla) pero no tiene 
ninguna influencia. ESTA OPCIÓN ME PARECE MÁS FÁCIL.

IMPORTANTE!

Dudo que haya tiempo a implementar combates contra entrenadores. Sale más rentable hacer combates individuales con pokémon
(SI HAY TIEMPO, ponemos el sprite de un entrenador y poco más, PERO SOLO CON UN POKÉMON) y al final del combate, si ganamos, 
reseteamos todo y mostramos el siguiente pokémon, hasta un máximo de 5 combates por ejemplo. (Al terminar todo, ahí sí que
veo útil la utilización y limpiado de pantalla mediante el doble buffer). Decir que podemos tener varios punteros 
a un conjunto determiando de pokémon, para que, de uno en uno, estos sean aleatorios.

Con respecto al menú, se dibuja dabajo de la pantalla un rectángulo con trazado negro (sin relleno ya que el fondo de combate
es totalmente blanco) que contiene 4 movimientos (NADA DE MOVIMIENTOS DE CAMBIO DE ESTADO, SOLO SI DA TIEMPO).
Podemos tener un total de 16 (para que sea par ya que solo es texto, que se seleccionan con RANDOM).
Los pokémon adeversários también tienen algunos de los 16 movimientos, (no necesáriamente idénticos a los del jugador).
La selección del movimiento, para que el jugador sepa qué es lo que está seleccionado, puede ser un trazado rectángulo negro y
poca cosa más. Esta caja se mantiene en todo momento, solo cámbia al final de la partida.
Comentar que podemos tener música de fondo durante el combate, que es muy sencillo de implementar. Para cada ataque
un pequeño efecto de sonido del antiguo, para que no sea tan monótono.

Finalmente quiero añadir que tenemos ya las dos funciones que se requieren en la documentación del proyecto, de
modo que si no nos da tiempo, NO HACE FALTA IMPLEMENTAR LA LECTURA CON RATÓN. Ya tenemos suficiente con
el teclado.

Con esto dicho feliz navidad!
